<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="da/d96/group__tripal__chado__database__api" kind="group">
    <compoundname>tripal_chado_database_api</compoundname>
    <title>Chado DB</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="da/d96/group__tripal__chado__database__api_1gac3b4716887c1f66b26f13ba6b265803d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_associate_dbxref</definition>
        <argsstring>($basetable, $record_id, $dbxref, $options=array())</argsstring>
        <name>chado_associate_dbxref</name>
        <param>
          <declname>$basetable</declname>
        </param>
        <param>
          <declname>$record_id</declname>
        </param>
        <param>
          <declname>$dbxref</declname>
        </param>
        <param>
          <declname>$options</declname>
          <defval>array()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a record to a database reference linking table (ie: feature_dbxref).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$basetable</parametername>
</parameternamelist>
<parameterdescription>
<para>The base table for which the dbxref should be associated. Thus to associate a dbxref with a feature the basetable=feature and dbxref_id is added to the feature_dbxref table. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$record_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The primary key of the basetable to associate the dbxref with. This should be in integer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$dbxref</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array describing the dbxref. Valid keys include: &apos;accession&apos; =&gt; the accession for the dbxref, &apos;db_name&apos; =&gt; the name of the database the dbxref belongs to. &apos;db_id&apos; =&gt; the primary key of the database the dbxref belongs to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$options</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array of options. Valid keys include:<itemizedlist>
<listitem><para>insert_dbxref: Insert the dbxref if it doesn&apos;t already exist. TRUE is the default. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tripal_chado/api/modules/tripal_chado.db.api.inc" line="480" column="1" bodyfile="tripal_chado/api/modules/tripal_chado.db.api.inc" bodystart="480" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="da/d96/group__tripal__chado__database__api_1gadb1b725f80fd565eeee9c27e11a86eed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_autocomplete_dbxref</definition>
        <argsstring>($db_id, $string=&apos;&apos;)</argsstring>
        <name>chado_autocomplete_dbxref</name>
        <param>
          <declname>$db_id</declname>
        </param>
        <param>
          <declname>$string</declname>
          <defval>&apos;&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is intended to be used in autocomplete forms for searching for accession that begin with the provided string.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$db_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The DB ID in which to search for the term. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to search for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A json array of terms that begin with the provided string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tripal_chado/api/modules/tripal_chado.db.api.inc" line="591" column="1" bodyfile="tripal_chado/api/modules/tripal_chado.db.api.inc" bodystart="591" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="da/d96/group__tripal__chado__database__api_1gae84b79a2d8af437fde99aa8a3fdc9de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_get_db</definition>
        <argsstring>($identifiers, $options=array())</argsstring>
        <name>chado_get_db</name>
        <param>
          <declname>$identifiers</declname>
        </param>
        <param>
          <declname>$options</declname>
          <defval>array()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a chado db variable.</para><para>Example Usage: <programlisting><codeline><highlight class="normal">$select_values<sp/>=<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&apos;name&apos;<sp/>=&gt;<sp/>&apos;SOFP&apos;</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">$db_object<sp/>=<sp/>chado_get_db($select_values);</highlight></codeline>
</programlisting></para><para>The above code selects the SOFP db and returns the following object: <programlisting><codeline><highlight class="normal">$db_object<sp/>=<sp/>stdClass<sp/>Object<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[db_id]<sp/>=&gt;<sp/>49</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[name]<sp/>=&gt;<sp/>SOFP</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[description]<sp/>=&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[urlprefix]<sp/>=&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[url]<sp/>=&gt;</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>An array with the key stating what the identifier is. Supported keys (only on of the following unique keys is required):<itemizedlist>
<listitem><para>db_id: the chado db.db_id primary key.</para></listitem><listitem><para>name: the chado db.name field (assume unique). </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$options</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of options. Supported keys include:<itemizedlist>
<listitem><para>Any keys supported by <ref refid="dd/d88/group__tripal__chado__variables__api_1ga6d6af1f6e23e5bbfae0d7867ce09af5a" kindref="member">chado_generate_var()</ref>. See that function definition for additional details.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
NOTE: the $identifier parameter can really be any array similar to $values passed into <ref refid="de/dc4/group__tripal__chado__query__api_1gad84b24dc3ed2e18b053977221f997a35" kindref="member">chado_select_record()</ref>. It should fully specify the db record to be returned.</para><para><simplesect kind="return"><para>If unique values were passed in as an identifier then an object describing the cv will be returned (will be a chado variable from <ref refid="dd/d88/group__tripal__chado__variables__api_1ga6d6af1f6e23e5bbfae0d7867ce09af5a" kindref="member">chado_generate_var()</ref>). Otherwise, an array of objects will be returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tripal_chado/api/modules/tripal_chado.db.api.inc" line="65" column="1" bodyfile="tripal_chado/api/modules/tripal_chado.db.api.inc" bodystart="65" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="da/d96/group__tripal__chado__database__api_1ga83ae3c1c2e710c5cb6dd69d55b198c84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_get_db_select_options</definition>
        <argsstring>()</argsstring>
        <name>chado_get_db_select_options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an options array to be used in a form element which provides a list of all chado dbs.</para><para><simplesect kind="return"><para>An array(db_id =&gt; name) for each db in the chado db table. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tripal_chado/api/modules/tripal_chado.db.api.inc" line="146" column="1" bodyfile="tripal_chado/api/modules/tripal_chado.db.api.inc" bodystart="146" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="da/d96/group__tripal__chado__database__api_1gaf354741688d7bf4119ec8bd43965357e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_get_dbxref</definition>
        <argsstring>($identifiers, $options=array())</argsstring>
        <name>chado_get_dbxref</name>
        <param>
          <declname>$identifiers</declname>
        </param>
        <param>
          <declname>$options</declname>
          <defval>array()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a chado database reference variable.</para><para>Example Usage: <programlisting><codeline><highlight class="normal">$identifiers<sp/>=<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&apos;accession&apos;<sp/>=&gt;<sp/>&apos;synonym&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&apos;db_id&apos;<sp/>=&gt;<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;name&apos;<sp/>=&gt;<sp/>&apos;SOFP&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">$dbxref_object<sp/>=<sp/>chado_get_dbxref($identifiers);</highlight></codeline>
</programlisting> The above code selects the synonym database reference and returns the following object: <programlisting><codeline><highlight class="normal">$dbxref_object<sp/>=<sp/>stdClass<sp/>Object<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>[dbxref_id]<sp/>=&gt;<sp/>2581</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>[accession]<sp/>=&gt;<sp/>synonym</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>[description]<sp/>=&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>[version]<sp/>=&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>[db_db_id]<sp/>=&gt;<sp/>49</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>[db_name]<sp/>=&gt;<sp/>SOFP</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>[db_description]<sp/>=&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>[db_urlprefix]<sp/>=&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>[db_url]<sp/>=&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>An array apropriate for use with the chado_generate_var for uniquely identifying a dbxref record. Alternatively, there are also some specially handled keys. They are:<itemizedlist>
<listitem><para>property: An array/object describing the property to select records for. It should at least have either a type_name (if unique across cvs) or type_id. Other supported keys include: cv_id/cv_name (of the type), value and rank. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$options</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of options. Supported keys include:<itemizedlist>
<listitem><para>Any keys supported by <ref refid="dd/d88/group__tripal__chado__variables__api_1ga6d6af1f6e23e5bbfae0d7867ce09af5a" kindref="member">chado_generate_var()</ref>. See that function definition for additional details.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
NOTE: the $identifier parameter can really be any array similar to $values passed into <ref refid="de/dc4/group__tripal__chado__query__api_1gad84b24dc3ed2e18b053977221f997a35" kindref="member">chado_select_record()</ref>. It should fully specify the dbxref record to be returned.</para><para><simplesect kind="return"><para>If unique values were passed in as an identifier then an object describing the dbxref will be returned (will be a chado variable from <ref refid="dd/d88/group__tripal__chado__variables__api_1ga6d6af1f6e23e5bbfae0d7867ce09af5a" kindref="member">chado_generate_var()</ref>). Otherwise, FALSE will be returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tripal_chado/api/modules/tripal_chado.db.api.inc" line="214" column="1" bodyfile="tripal_chado/api/modules/tripal_chado.db.api.inc" bodystart="214" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="da/d96/group__tripal__chado__database__api_1ga6692fee7456db781256e4108808fa34d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_get_dbxref_url</definition>
        <argsstring>($dbxref)</argsstring>
        <name>chado_get_dbxref_url</name>
        <param>
          <declname>$dbxref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generates a URL for the controlled vocabulary term.</para><para>If the URL and URL prefix are provided for the database record of a cvterm then a URL can be created for the term. By default, the db.name and dbxref.accession are concatenated and appended to the end of the db.urlprefix. But Tripal supports the use of {db} and {accession} tokens when if present in the db.urlprefix string will be replaced with the db.name and dbxref.accession respectively.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$dbxref</parametername>
</parameternamelist>
<parameterdescription>
<para>A dbxref object as created by the <ref refid="dd/d88/group__tripal__chado__variables__api_1ga6d6af1f6e23e5bbfae0d7867ce09af5a" kindref="member">chado_generate_var()</ref> function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string containing the URL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tripal_chado/api/modules/tripal_chado.db.api.inc" line="303" column="1" bodyfile="tripal_chado/api/modules/tripal_chado.db.api.inc" bodystart="303" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="da/d96/group__tripal__chado__database__api_1ga7f331faea3ff3c493fe64ee5ccb972de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_insert_db</definition>
        <argsstring>($values, $options=array())</argsstring>
        <name>chado_insert_db</name>
        <param>
          <declname>$values</declname>
        </param>
        <param>
          <declname>$options</declname>
          <defval>array()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a new database to the Chado DB table and returns the DB object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$values</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array of the values of the db (those to be inserted):<itemizedlist>
<listitem><para>name: The name of the database. This name is usually used as the prefix for CV term accessions.</para></listitem><listitem><para>description: (Optional) A description of the database. By default no description is required.</para></listitem><listitem><para>url: (Optional) The URL for the database.</para></listitem><listitem><para>urlprefix: (Optional) The URL that is to be used as a prefix when constructing a link to a database term. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$options</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional. An associative array of options that can include:<itemizedlist>
<listitem><para>update_existing: Set this to &apos;1&apos; to force an update of the database if it already exists. The default is to not update. If the database exists then nothing is added.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An object populated with fields from the newly added database. If the database already exists it returns the values in the current entry. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tripal_chado/api/modules/tripal_chado.db.api.inc" line="355" column="1" bodyfile="tripal_chado/api/modules/tripal_chado.db.api.inc" bodystart="355" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="da/d96/group__tripal__chado__database__api_1gacbea95be42e994968414915482a7ff34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_insert_dbxref</definition>
        <argsstring>($values)</argsstring>
        <name>chado_insert_dbxref</name>
        <param>
          <declname>$values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a database reference.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$values</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array of the values to be inserted including:<itemizedlist>
<listitem><para>db_id: the database_id of the database the reference is from.</para></listitem><listitem><para>accession: the accession.</para></listitem><listitem><para>version: (Optional) The version of the database reference.</para></listitem><listitem><para>description: (Optional) A description of the database reference.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly inserted dbxref as an object, similar to that returned by the <ref refid="de/dc4/group__tripal__chado__query__api_1gad84b24dc3ed2e18b053977221f997a35" kindref="member">chado_select_record()</ref> function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tripal_chado/api/modules/tripal_chado.db.api.inc" line="418" column="1" bodyfile="tripal_chado/api/modules/tripal_chado.db.api.inc" bodystart="418" bodyend="456"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>External databases can be used to indicate the source for a variety of data. The most common use is with controlled vocabularies (CV). Chado expects that every CV have an external database record, where the database name must be the short name of the CV. In other cases, records such as features, stocks, libraries, etc., can also be present in remote databases and these associations can be made through dbxref linker tables. The API functions provided here provide tools to easily work with external databases. </para>    </detaileddescription>
  </compounddef>
</doxygen>

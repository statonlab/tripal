<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="d8/d43/group__tripal__legacy__chado__node__api" kind="group">
    <compoundname>tripal_legacy_chado_node_api</compoundname>
    <title>Legacy Chado Nodes</title>
    <innerfile refid="de/d09/tripal__core_8chado__nodes_8dbxrefs_8api_8inc">tripal_core.chado_nodes.dbxrefs.api.inc</innerfile>
    <innerfile refid="dc/d25/tripal__core_8chado__nodes_8properties_8api_8inc">tripal_core.chado_nodes.properties.api.inc</innerfile>
    <innerfile refid="d0/d71/tripal__core_8chado__nodes_8relationships_8api_8inc">tripal_core.chado_nodes.relationships.api.inc</innerfile>
      <sectiondef kind="func">
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1gae15385749a7549bd6a0265f3d438f151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_add_admin_form_set_title</definition>
        <argsstring>(&amp;$form, &amp;$form_state, $details)</argsstring>
        <name>chado_add_admin_form_set_title</name>
        <param>
          <type>&amp;</type>
          <declname>$form</declname>
        </param>
        <param>
          <type>&amp;</type>
          <declname>$form_state</declname>
        </param>
        <param>
          <declname>$details</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generic &quot;Set Node Title&quot; sub-form for setting the title of any chado node</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$form</parametername>
</parameternamelist>
<parameterdescription>
<para>The Drupal form array into which the property form elements will be added </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$form_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The corresponding form_state array for the form </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$details</parametername>
</parameternamelist>
<parameterdescription>
<para>An array defining details used by this form. Required keys that are always required: -module: the name of the module implementing the node. For example, for features the module is tripal_feature. -options: an array of quick-choice options to supply to the user. The key should be the token and the value should be a human-readable description of the option -content_type: the name of the content type. Defaults to module name. Optional keys include: -fieldset_title: the title to use for the fieldset. Defaults to &quot;Set Page Title&quot;. -default_option: the default format to use which matches one of those in $details[&apos;options&apos;] -custom_tokens: an array of custom tokens that follow the same format as those generated by <ref refid="d8/d43/group__tripal__legacy__chado__node__api_1ga5588879f647bb4ea65f592261a86f2ae" kindref="member">chado_node_generate_tokens()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" line="245" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" bodystart="245" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga8bab59be7bf1fb6ea3fb0486fda79a8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_add_admin_form_set_url</definition>
        <argsstring>(&amp;$form, &amp;$form_state, $details)</argsstring>
        <name>chado_add_admin_form_set_url</name>
        <param>
          <type>&amp;</type>
          <declname>$form</declname>
        </param>
        <param>
          <type>&amp;</type>
          <declname>$form_state</declname>
        </param>
        <param>
          <declname>$details</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generic &quot;Set Node URL&quot; sub-form for setting the url of any chado node</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$form</parametername>
</parameternamelist>
<parameterdescription>
<para>The Drupal form array into which the property form elements will be added </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$form_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The corresponding form_state array for the form </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$details</parametername>
</parameternamelist>
<parameterdescription>
<para>An array defining details used by this form. Required keys that are always required: -module: the name of the module implementing the node. For example, for features the module is tripal_feature. -options: an array of quick-choice options to supply to the user. The key should be the token and the value should be a human-readable description of the option Optional keys include: -content_type: the name of the content type. Defaults to module name. -fieldset_title: the title to use for the fieldset. Defaults to &quot;Set Page url&quot;. -default_option: the default format to use which matches one of those in $details[&apos;options&apos;] -custom_tokens: an array of custom tokens that follow the same format as those generated by <ref refid="d8/d43/group__tripal__legacy__chado__node__api_1ga5588879f647bb4ea65f592261a86f2ae" kindref="member">chado_node_generate_tokens()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" line="771" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" bodystart="771" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga8b780287deaa0ac4cf92d6271e0b38f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_add_node_form_dbxrefs</definition>
        <argsstring>(&amp;$form, &amp;$form_state, $details)</argsstring>
        <name>chado_add_node_form_dbxrefs</name>
        <param>
          <type>&amp;</type>
          <declname>$form</declname>
        </param>
        <param>
          <type>&amp;</type>
          <declname>$form_state</declname>
        </param>
        <param>
          <declname>$details</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.dbxrefs.api.inc" line="125" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.dbxrefs.api.inc" bodystart="125" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga166d6725d26f7be0d222684e055586e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_add_node_form_properties</definition>
        <argsstring>(&amp;$form, &amp;$form_state, $details)</argsstring>
        <name>chado_add_node_form_properties</name>
        <param>
          <type>&amp;</type>
          <declname>$form</declname>
        </param>
        <param>
          <type>&amp;</type>
          <declname>$form_state</declname>
        </param>
        <param>
          <declname>$details</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides a form for adding to BASEprop table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$form</parametername>
</parameternamelist>
<parameterdescription>
<para>The Drupal form array into which the property form elements will be added </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$form_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The corresponding form_state array for the form </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$details</parametername>
</parameternamelist>
<parameterdescription>
<para>An array defining details used by this form. Required keys that are always required:<itemizedlist>
<listitem><para>property_table: the name of the property table (e.g.: featureprop, stockprop, etc.) Required keys for forms that update a record.</para></listitem><listitem><para>chado_id: the id of the record to which properties will be associated (e.g.: if a feature has a feature_id of 999 and we want to associate properties for that feature then the chado_id option should be 999) Require ONE of the following to identify the controlled vocabulary containing the properties to use:</para></listitem><listitem><para>cv_id: the unique key from the cv table</para></listitem><listitem><para>cv_name: the cv.name field uniquely identifying the controlled vocabulary Optional keys include:</para></listitem><listitem><para>chado_id_field: the foreign key field that links properties to the chado_id record. If this value is not specified it is determined using the traditional Chado naming scheme for property tables.</para></listitem><listitem><para>additional_instructions: provides additional instructions to the user for dealing with the property elements. These instructions are appended to the default instructions</para></listitem><listitem><para>fieldset_title: An alternate name for the fieldset in which the properties form is placed. By default the title is &apos;Properties&apos;.</para></listitem><listitem><para>default_properties: An array of properties used to initialize the properties form. Each property shoudl be represented as an array with the following keys and values: &apos;cvterm&apos;: The cvterm object for the property type &apos;value&apos;: The property value</para></listitem><listitem><para>select_options: an array of terms to use for the drop down select box. this array will be used rather than populating the drop down with terms from the named vocabulary. The array must have keys with the cvterm_id and values with the cvterm name. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.properties.api.inc" line="140" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.properties.api.inc" bodystart="140" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga6646656f80b03567ae5ab8ebc3c11443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_add_node_form_relationships</definition>
        <argsstring>(&amp;$form, &amp;$form_state, $details)</argsstring>
        <name>chado_add_node_form_relationships</name>
        <param>
          <type>&amp;</type>
          <declname>$form</declname>
        </param>
        <param>
          <type>&amp;</type>
          <declname>$form_state</declname>
        </param>
        <param>
          <declname>$details</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides a form for adding to BASE_relationship and relationship tables</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$form</parametername>
</parameternamelist>
<parameterdescription>
<para>The Drupal form array into which the relationship elements will be added </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$form_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The corresponding form_state array for the form </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$details</parametername>
</parameternamelist>
<parameterdescription>
<para>An array defining details needed by this form. Required Keys are:<itemizedlist>
<listitem><para>relationship_table: the name of the relationship table (ie: feature_relationship)</para></listitem><listitem><para>base_table: the name of the base table (ie: feature)</para></listitem><listitem><para>base_foreign_key: the name of the foreign key in the relationship table field linking this table to the non-relationship table (ie: feature_id)</para></listitem><listitem><para>base_key_value: the value of the base_foreign_key for the current form (ie: 999 if the feature_id=999)</para></listitem><listitem><para>nodetype: the non-translated singular title of this node type One of the following:</para></listitem><listitem><para>cv_id: the id of the ontology to supply terms for the type dropdown</para></listitem><listitem><para>cv_name: the name of the ontology to supply terms for the type dropdown Optional keys include:</para></listitem><listitem><para>fieldset_title: the non-translated title for this fieldset</para></listitem><listitem><para>additional_instructions: a non-translated string providing additional instructions</para></listitem><listitem><para>nodetype_plural: the non-translated plural title of this node type</para></listitem><listitem><para>select_options: must be an array where the [key] is a valid cvterm_id and the [value] is the human-readable name of the option. This is generated from the cv_name/id by default</para></listitem><listitem><para>base_name_field: the field in your base table you want to be used as the name of the record</para></listitem><listitem><para>subject_field_name: the name of the subject field in your relationship table (default: subject_id)</para></listitem><listitem><para>object_field_name: the name of the object field in your relationship table (default: object_id) </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.relationships.api.inc" line="127" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.relationships.api.inc" bodystart="127" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga742e5f56a6a2ed5b826e0a3b557349a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_cleanup_orphaned_nodes</definition>
        <argsstring>($table, $nentries=25000, $linking_table=NULL, $node_type=NULL, $job_id=NULL)</argsstring>
        <name>chado_cleanup_orphaned_nodes</name>
        <param>
          <declname>$table</declname>
        </param>
        <param>
          <declname>$nentries</declname>
          <defval>25000</defval>
        </param>
        <param>
          <declname>$linking_table</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <declname>$node_type</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <declname>$job_id</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is a wrapper for the chado_cleanup_orphaned_nodes function. It breaks up the work of chado_cleanup_orphaned_nodes into smaller pieces that are more managable for servers that may have low php memory settings.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$table</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the table that corresonds to the node type we want to clean up. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$nentries</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional. The number of entries to parse at one time (ie: the batch size). Set to zero if no limit is needed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$linking_table</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional. The name of the linking table that maps Drupal nodes to Chado records. This is only required if the linking table name is not of the form: chado_[table] where [table] is the value provided to the $table argument. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$node_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional. The name of the node type for the records. This is only required if the node type is not of the form: chado_[table] where [table] is the value provided to the $table. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$job_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional. This should be the job id from the Tripal jobs system. Typically, only the Tripal jobs system will use the argument. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" line="1003" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" bodystart="1003" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1gad6dd911a15ce9e07b97e2f6652e80187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_cleanup_orphaned_nodes_part</definition>
        <argsstring>($table, $job_id=NULL, $nentries, $offset, $linking_table, $node_type)</argsstring>
        <name>chado_cleanup_orphaned_nodes_part</name>
        <param>
          <declname>$table</declname>
        </param>
        <param>
          <declname>$job_id</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <declname>$nentries</declname>
        </param>
        <param>
          <declname>$offset</declname>
        </param>
        <param>
          <declname>$linking_table</declname>
        </param>
        <param>
          <declname>$node_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete Drupal nodes for any sync&apos;ed table (e.g. feature, organism, analysis, stock, library) if the chado record has been deleted or the entry in the chado_[table] table has been removed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$table</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the table that corresonds to the node type we want to clean up. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$job_id</parametername>
</parameternamelist>
<parameterdescription>
<para>This should be the job id from the Tripal jobs system. This function will update the job status using the provided job ID. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" line="1069" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" bodystart="1069" bodyend="1196"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga4b1cdb30165d8a7fa2b2b788d651475f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_get_id_from_nid</definition>
        <argsstring>($table, $nid, $linking_table=NULL)</argsstring>
        <name>chado_get_id_from_nid</name>
        <param>
          <declname>$table</declname>
        </param>
        <param>
          <declname>$nid</declname>
        </param>
        <param>
          <declname>$linking_table</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get chado id for a node. E.g, if you want to get &apos;analysis_id&apos; from the &apos;analysis&apos; table for a synced &apos;chado_analysis&apos; node, (the same for organisms and features): $analysis_id = chado_get_id_from_nid (&apos;analysis&apos;, $node-&gt;nid) $organism_id = chado_get_id_from_nid (&apos;organism&apos;, $node-&gt;nid) $feature_id = chado_get_id_from_nid (&apos;feature&apos;, $node-&gt;nid)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$table</parametername>
</parameternamelist>
<parameterdescription>
<para>The chado table the chado record is from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$nid</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the primary key of node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$linking_table</parametername>
</parameternamelist>
<parameterdescription>
<para>The Drupal table linking the chado record to it&apos;s node. This field is optional and defaults to chado_$table</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The chado id of the associated chado record </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" line="57" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" bodystart="57" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga3ae4379f4a565328b49b2025ff3e5477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_get_nid_from_id</definition>
        <argsstring>($table, $id, $linking_table=NULL)</argsstring>
        <name>chado_get_nid_from_id</name>
        <param>
          <declname>$table</declname>
        </param>
        <param>
          <declname>$id</declname>
        </param>
        <param>
          <declname>$linking_table</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get node id for a chado feature/organism/analysis. E.g, if you want to get the node id for an analysis, use: $nid = chado_get_nid_from_id (&apos;analysis&apos;, $analysis_id) Likewise, $nid = chado_get_nid_from_id (&apos;organism&apos;, $organism_id) $nid = chado_get_nid_from_id (&apos;feature&apos;, $feature_id)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$table</parametername>
</parameternamelist>
<parameterdescription>
<para>The chado table the id is from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$id</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the primary key from the $table chado table (ie: feature_id) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$linking_table</parametername>
</parameternamelist>
<parameterdescription>
<para>The Drupal table linking the chado record to it&apos;s node. This field is optional and defaults to chado_$table</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The nid of the associated node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" line="87" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" bodystart="87" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga6be2b3290e82364d934fbb30532a0868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_get_node_title</definition>
        <argsstring>($node)</argsstring>
        <name>chado_get_node_title</name>
        <param>
          <declname>$node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" line="196" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" bodystart="196" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga1d0ba1cce0cf57234a9e90607233b7c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_get_node_url</definition>
        <argsstring>($node)</argsstring>
        <name>chado_get_node_url</name>
        <param>
          <declname>$node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" line="534" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" bodystart="534" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga6afd60d9aa697351972c5b86575b8a03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_get_token_value</definition>
        <argsstring>($token_info, $node, $options=array())</argsstring>
        <name>chado_get_token_value</name>
        <param>
          <declname>$token_info</declname>
        </param>
        <param>
          <declname>$node</declname>
        </param>
        <param>
          <declname>$options</declname>
          <defval>array()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the value of the token from the node based on the $token_info[&apos;location&apos;]</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$token_info</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of information about the token including: -table: the name of the chado table -field: the name of the field in the above table -token: the token string (ie: [stock.stock_id]) -description: a very short description of the token (displayed when tokens are listed) -location: the location of the value in a chado node variable with each level separated by an arrow (&gt;) symbol. For example, the location for $node-&gt;feature-&gt;type_id-&gt;name is feature&gt;type_id&gt;name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node to get the value of the token</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the token </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" line="1329" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" bodystart="1329" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga6c4b7a2c91e0968cf7693432ccf17992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_node_add_token_format</definition>
        <argsstring>($application, $content_type, $format, $tokens)</argsstring>
        <name>chado_node_add_token_format</name>
        <param>
          <declname>$application</declname>
        </param>
        <param>
          <declname>$content_type</declname>
        </param>
        <param>
          <declname>$format</declname>
        </param>
        <param>
          <declname>$tokens</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" line="1093" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" bodystart="1093" bodyend="1115"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga5588879f647bb4ea65f592261a86f2ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_node_generate_tokens</definition>
        <argsstring>($base_table, $token_prefix=FALSE, $location_prefix=FALSE)</argsstring>
        <name>chado_node_generate_tokens</name>
        <param>
          <declname>$base_table</declname>
        </param>
        <param>
          <declname>$token_prefix</declname>
          <defval>FALSE</defval>
        </param>
        <param>
          <declname>$location_prefix</declname>
          <defval>FALSE</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate tokens for a particular base table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$base_table</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the chado table you would like to generate tokens for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$token_prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>RECURSIVE ARG: Used to determine the generic token based on previous interations. For example, when adding cvterm fields to a feature token, the token_prefix is &quot;feature.type_id&quot; so that resulting tokens can be &quot;feature.type_id&gt;cvterm.*&quot; (ie: [feature.type_id&gt;cvterm.name] ) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$location_prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>RECURSIVE ARG: Used to keep track of the location of the value based on previous interations. For example, when adding cvterm fields to a feature token, the location_prefix is &quot;feature &gt; type_id&quot; so that resulting tokens can be &quot;feature &gt; type_id &gt; *&quot; (ie: feature &gt; type_id &gt; name) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of available tokens where the key is the table.field and the value is an array with the following keys: -table: the name of the chado table -field: the name of the field in the above table -token: the token string (ie: [stock.stock_id]) -description: a very short description of the token (displayed when tokens are listed) -location: the location of the value in a chado node variable with each level separated by an arrow (-&gt;) symbol. For example, the location for $node-&gt;feature-&gt;type_id-&gt;name is feature&gt;type_id&gt;name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" line="1254" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" bodystart="1254" bodyend="1307"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1gac4b140c01ccd507d686cdefc31f365ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_node_get_base_table</definition>
        <argsstring>($content_type, $module=FALSE)</argsstring>
        <name>chado_node_get_base_table</name>
        <param>
          <declname>$content_type</declname>
        </param>
        <param>
          <declname>$module</declname>
          <defval>FALSE</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine the chado base table for a given content type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$content_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The machine name of the content type (node type) you want to determine the base chado table of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$module</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) The machine-name of the module implementing the content type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The name of the chado base table for the specified content type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" line="111" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" bodystart="111" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1gad50ca3f66cd8f6eabbc3be91320f6be1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_node_get_legacy_title_default</definition>
        <argsstring>($content_type)</argsstring>
        <name>chado_node_get_legacy_title_default</name>
        <param>
          <declname>$content_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handles legacy title options</para><para>Features &amp; Stocks already had custom functionality to handle title setting before this API was created. That has since been removed but but to remain backwards compatible this function checks for those old settings and translates them into new defaults. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" line="482" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" bodystart="482" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga177274f316b8f44e25cc43a5d706b9a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_node_get_legacy_url_default</definition>
        <argsstring>($content_type)</argsstring>
        <name>chado_node_get_legacy_url_default</name>
        <param>
          <declname>$content_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handles legacy URL options</para><para>Features, Projects &amp; Stocks already had custom functionality to handle URL setting before this API was created. That has since been removed but to remain backwards compatible this function checks for those old settings and translates them into new defaults. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" line="1028" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" bodystart="1028" bodyend="1070"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga678469ec2f27a2354fa5c0176802cabf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_node_get_title_format</definition>
        <argsstring>($content_type, &amp;$tokens, $base_table=NULL)</argsstring>
        <name>chado_node_get_title_format</name>
        <param>
          <declname>$content_type</declname>
        </param>
        <param>
          <type>&amp;</type>
          <declname>$tokens</declname>
        </param>
        <param>
          <declname>$base_table</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the title format for a specific content type</para><para>If the title format has not yet been set then the following will be done 1) Check to see if there is a legacy title format set (features &amp; stocks) 2) Check if there is a defined default for this content type 3) Create a format using any name fields and the unique constraint for the base table associated with this content type</para><para>Define a default for a specific content type by implementing a function of the name [content type]_chado_node_default_title_format() that returns a string describing the default format.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$content_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the content (node) type you are interested in (ie: chado_feature) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$tokens</parametername>
</parameternamelist>
<parameterdescription>
<para>An array, passed by reference that is filled to include the tokens for this node type. Each token is an array with the following keys: -table: the name of the chado table -field: the name of the field in the above table -token: the token string (ie: [stock.stock_id]) -description: a very short description of the token (displayed when tokens are listed) -location: the location of the value in a chado node variable with each level separated by an arrow (-&gt;) symbol. For example, the location for $node-&gt;feature-&gt;type_id-&gt;name is feature&gt;type_id&gt;name</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string containing tokens describing the default format for the title of nodes of the specified content type. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" line="422" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" bodystart="422" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1gadac406c54ee6c9dd13e8ebc4deb8b40b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_node_get_token_format</definition>
        <argsstring>($application, $content_type, $options=array())</argsstring>
        <name>chado_node_get_token_format</name>
        <param>
          <declname>$application</declname>
        </param>
        <param>
          <declname>$content_type</declname>
        </param>
        <param>
          <declname>$options</declname>
          <defval>array()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the format for the given application of a given content type (ie: the feature title)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$application</parametername>
</parameternamelist>
<parameterdescription>
<para>What the format is to be applied to. For example &apos;title&apos; for generating node titles and &apos;path&apos; for generating node paths </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$content_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the content type this format applies to (ie: $node-&gt;type) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$options</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of any of the following options:<itemizedlist>
<listitem><para>return_record: if TRUE this will return the entire record rather than just the format string </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string specifying the format </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" line="1134" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" bodystart="1134" bodyend="1155"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1gad00086a99a67b021e0d631c46ac5f110" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_node_get_unique_constraint_format</definition>
        <argsstring>($base_table, $format_type=&apos;title&apos;)</argsstring>
        <name>chado_node_get_unique_constraint_format</name>
        <param>
          <declname>$base_table</declname>
        </param>
        <param>
          <declname>$format_type</declname>
          <defval>&apos;<ref refid="d0/d42/tripal__feature__teaser_8tpl_8php_1ab5501754233ec6aec5f04ef03f3bfc28" kindref="member">title</ref>&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate the unique constraint for a given base table using the Chado Schema API definition</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$base_table</parametername>
</parameternamelist>
<parameterdescription>
<para>The base table to generate the unique constraint format for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$format_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of format to return. This should be one of &apos;title&apos; or &apos;url&apos;. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A format string including tokens describing the unique constraint including all name fields </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" line="1171" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" bodystart="1171" bodyend="1226"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga9470e29b313ec722a24f2d613c7f66aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_node_get_url_format</definition>
        <argsstring>($content_type, &amp;$tokens, $base_table=NULL)</argsstring>
        <name>chado_node_get_url_format</name>
        <param>
          <declname>$content_type</declname>
        </param>
        <param>
          <type>&amp;</type>
          <declname>$tokens</declname>
        </param>
        <param>
          <declname>$base_table</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the url format for a specific content type</para><para>If the url format has not yet been set then the following will be done 1) Check to see if there is a legacy url format set (features &amp; stocks) 2) Check if there is a defined default for this content type 3) Create a format using any name fields and the unique constraint for the base table associated with this content type</para><para>Define a default for a specific content type by implementing a function of the name [content type]_chado_node_default_url_format() that returns a string describing the default format.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$content_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the content (node) type you are interested in (ie: chado_feature) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$tokens</parametername>
</parameternamelist>
<parameterdescription>
<para>An array, passed by reference that is filled to include the tokens for this node type. Each token is an array with the following keys: -table: the name of the chado table -field: the name of the field in the above table -token: the token string (ie: [stock.stock_id]) -description: a very short description of the token (displayed when tokens are listed) -location: the location of the value in a chado node variable with each level separated by an arrow (-&gt;) symbol. For example, the location for $node-&gt;feature-&gt;type_id-&gt;name is feature&gt;type_id&gt;name</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string containing tokens describing the default format for the url of nodes of the specified content type. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" line="966" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" bodystart="966" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga753ddb12263511e4667c6081cb4aab2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_node_sync_form</definition>
        <argsstring>($form, &amp;$form_state)</argsstring>
        <name>chado_node_sync_form</name>
        <param>
          <declname>$form</declname>
        </param>
        <param>
          <type>&amp;</type>
          <declname>$form_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" line="416" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" bodystart="416" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga7145af80db3d89b022703df056227023" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_node_sync_records</definition>
        <argsstring>($base_table, $max_sync=FALSE, $organism_id=FALSE, $types=array(), $ids=array(), $linking_table=FALSE, $node_type=FALSE, $job_id=NULL)</argsstring>
        <name>chado_node_sync_records</name>
        <param>
          <declname>$base_table</declname>
        </param>
        <param>
          <declname>$max_sync</declname>
          <defval>FALSE</defval>
        </param>
        <param>
          <declname>$organism_id</declname>
          <defval>FALSE</defval>
        </param>
        <param>
          <declname>$types</declname>
          <defval>array()</defval>
        </param>
        <param>
          <declname>$ids</declname>
          <defval>array()</defval>
        </param>
        <param>
          <declname>$linking_table</declname>
          <defval>FALSE</defval>
        </param>
        <param>
          <declname>$node_type</declname>
          <defval>FALSE</defval>
        </param>
        <param>
          <declname>$job_id</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generic function for syncing records in Chado with Drupal nodes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$base_table</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the Chado table containing the record that should be synced </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$max_sync</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional: A numeric value to indicate the maximum number of records to sync. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$organism_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional: Limit the list of records to be synced to only those that are associated with this organism_id. If the record is not assocaited with an organism then this field is not needed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$types</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional: Limit the list of records to be synced to only those that match the types listed in this array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional: Limit the list of records to bye synced to only those whose primary key value matches the ID provided in this array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$linking_table</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional: Tripal maintains &quot;linking&quot; tables in the Drupal schema to link Drupal nodes with Chado records. By default these tables are named as &apos;chado_&apos; . $base_table. But if for some reason the linking table is not named in this way then it can be provided by this argument. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$node_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional: Tripal maintains &quot;linking&quot; tables in the Drupal schema to link Drupal nodes with Chado records. By default, Tripal expects that the node_type and linking table are named the same. However, if this is not the case, you can provide the node type name here. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$job_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional. Used by the Trpial Jobs system when running this function as a job. It is not needed othewise. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" line="786" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" bodystart="786" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1gaa9b8535fec937387ec795c7e41e1fa17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_retrieve_node_form_dbxrefs</definition>
        <argsstring>($node)</argsstring>
        <name>chado_retrieve_node_form_dbxrefs</name>
        <param>
          <declname>$node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is used in a hook_insert, hook_update for a node form when the additional_dbxrefs form has been added to the form. It retrieves all of the dbxrefs and returns them in an array of the format:</para><para>$dbxefs[&lt;db_id&gt;][&lt;version&gt;][&lt;dbxref_id&gt;] = &lt;accession&gt;</para><para>This array can then be used for inserting or updating dbxrefs using the API call tripal_hook_insert_dbxref()</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A dbxref array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.dbxrefs.api.inc" line="628" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.dbxrefs.api.inc" bodystart="628" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga030cf5ac5382e71f01d5e8518bd62b5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_retrieve_node_form_properties</definition>
        <argsstring>($node)</argsstring>
        <name>chado_retrieve_node_form_properties</name>
        <param>
          <declname>$node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is used in a hook_insert, hook_update for a node form when the chado node properties form has been added to the form. It retrieves all of the properties and returns them in an array of the format:</para><para>$dbxefs[&lt;type_id&gt;][&lt;rank&gt;] = </para><para>This array can then be used for inserting or updating properties</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A property array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.properties.api.inc" line="850" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.properties.api.inc" bodystart="850" bodyend="864"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga64a1a298825f2e5cd5e19587fad1c15c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_retrieve_node_form_relationships</definition>
        <argsstring>($node)</argsstring>
        <name>chado_retrieve_node_form_relationships</name>
        <param>
          <declname>$node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is used in a hook_insert, hook_update for a node form when the relationships form has been added to the form. It retrieves all of the relationships and returns them in an array of the format:</para><para>$relationships[&lt;type_id&gt;][&lt;rank&gt;] = array( &apos;subject_id&apos; =&gt; &lt;subject_id&gt;, &apos;object_id&apos; =&gt; &lt;object_id&gt;, );</para><para>This array can then be used for inserting or updating relationships manually</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A relationship array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.relationships.api.inc" line="928" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.relationships.api.inc" bodystart="928" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1gaf604eef6001c517ea9e08b6609528b8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_set_node_url</definition>
        <argsstring>($node)</argsstring>
        <name>chado_set_node_url</name>
        <param>
          <declname>$node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the URL for a given node.</para><para>Note: This makes the old URL completely invalid which breaks bookmarks. Furthermore, if someone attempts to go to an old URL they will get a white screen PDO error which is not very user friendly ;-) <xrefsect id="dd/da0/todo_1_todo000015"><xreftitle>Todo</xreftitle><xrefdescription><para>handle re-directing for old URLs or at least ensure a page not found error is displayed.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node to set the URL for. The node object must have at a minimum the &apos;nid&apos; and &apos;type&apos; properties, as well as the chado object (e.g. &apos;organism&apos; for chado_organism node type, and &apos;feature&apos; for chado_feature node type, etc.).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The URL alias that was set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" line="588" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" bodystart="588" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga108f6c0724c55abd98c967529835da28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_update_existing_node_urls</definition>
        <argsstring>($content_type, $job_id=0)</argsstring>
        <name>chado_update_existing_node_urls</name>
        <param>
          <declname>$content_type</declname>
        </param>
        <param>
          <declname>$job_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tripal Job for updating all node URLs for a particular node type.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$content_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The machine name of the node type to update URLs for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$job_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the tripal job calling this function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" line="663" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.title_and_path.inc" bodystart="663" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga3d087bdaa81217998bd843e943db32a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_update_node_form_dbxrefs</definition>
        <argsstring>($node, $details, $retrieved_dbxrefs=FALSE)</argsstring>
        <name>chado_update_node_form_dbxrefs</name>
        <param>
          <declname>$node</declname>
        </param>
        <param>
          <declname>$details</declname>
        </param>
        <param>
          <declname>$retrieved_dbxrefs</declname>
          <defval>FALSE</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is used in hook_insert or hook_update and handles inserting of any new dbxrefs and creation of links between those dbxrefs and node content</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node passed into hook_insert &amp; hook_update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$details</parametername>
</parameternamelist>
<parameterdescription>
<para><itemizedlist>
<listitem><para>linking_table: the name of the _dbxref linking table (ie: feature_dbxref)</para></listitem><listitem><para>foreignkey_name: the name of the foreign key used to link to the node content (ie: feature_id)</para></listitem><listitem><para>foreignkey_value: the value of the foreign key (ie: 445, if there exists a feature where feature_id=445) </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$retrieved_dbxrefs</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of databa references from chado_retrieve_node_form_dbxrefs($node). This can be used if you need special handling for some of the database references </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.dbxrefs.api.inc" line="661" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.dbxrefs.api.inc" bodystart="661" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga3437329db2bcf725de92a9e0ded6e651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_update_node_form_properties</definition>
        <argsstring>($node, $details, $retrieved_properties=FALSE)</argsstring>
        <name>chado_update_node_form_properties</name>
        <param>
          <declname>$node</declname>
        </param>
        <param>
          <declname>$details</declname>
        </param>
        <param>
          <declname>$retrieved_properties</declname>
          <defval>FALSE</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is used in hook_insert or hook_update and handles inserting of any new properties</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node passed into hook_insert &amp; hook_update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$details</parametername>
</parameternamelist>
<parameterdescription>
<para><itemizedlist>
<listitem><para>property_table: the name of the _property linking table (ie: feature_property)</para></listitem><listitem><para>base_table: the name of the base table (ie: feature)</para></listitem><listitem><para>foreignkey_name: the name of the foreign key used to link to the node content (ie: feature_id)</para></listitem><listitem><para>foreignkey_value: the value of the foreign key (ie: 445, if there exists a feature where feature_id=445) </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$retrieved_properties</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of properties from chado_retrieve_node_form_properties($node). This can be used if you need special handling for some of the properties (See FeatureMap chado_featuremap_insert for an example) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.properties.api.inc" line="883" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.properties.api.inc" bodystart="883" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1gadf49a9526719dfe4b75346b349592f92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_update_node_form_relationships</definition>
        <argsstring>($node, $details, $retrieved_relationships=FALSE)</argsstring>
        <name>chado_update_node_form_relationships</name>
        <param>
          <declname>$node</declname>
        </param>
        <param>
          <declname>$details</declname>
        </param>
        <param>
          <declname>$retrieved_relationships</declname>
          <defval>FALSE</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is used in hook_insert or hook_update and handles inserting of relationships between the current nodetype and other memebers of the same nodetype</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node passed into hook_insert &amp; hook_update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$details</parametername>
</parameternamelist>
<parameterdescription>
<para><itemizedlist>
<listitem><para>relationship_table: the name of the _relationship linking table (ie: feature_relationship)</para></listitem><listitem><para>foreignkey_value: the value of the foreign key (ie: 445, if there exists a feature where feature_id=445) </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$retrieved_relationships</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of relationships from chado_retrieve_node_form_relationships($node). This can be used if you need special handling for some of the relationships. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.relationships.api.inc" line="960" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.relationships.api.inc" bodystart="960" bodyend="1028"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga191042f2717f754ed7974e4504ec6dfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_chado_node_sync_create_new_node</definition>
        <argsstring>($new_node, $record)</argsstring>
        <name>hook_chado_node_sync_create_new_node</name>
        <param>
          <declname>$new_node</declname>
        </param>
        <param>
          <declname>$record</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create New Node</para><para>Note: For your own module, replace hook in the function name with the machine-name of your chado node type (ie: chado_feature).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$new_node</parametername>
</parameternamelist>
<parameterdescription>
<para>a basic new node object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$record</parametername>
</parameternamelist>
<parameterdescription>
<para>the record object from chado specifying the biological data for this node</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A node object containing all the fields necessary to create a new node during sync </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" line="1215" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" bodystart="1215" bodyend="1224"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1gaba5aa7ceebcb65b26b34c1bb685eaf92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_chado_node_sync_form</definition>
        <argsstring>($form, &amp;$form_state)</argsstring>
        <name>hook_chado_node_sync_form</name>
        <param>
          <declname>$form</declname>
        </param>
        <param>
          <type>&amp;</type>
          <declname>$form_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the Chado node sync form.</para><para>This might be necessary if you need additional filtering options for choosing which chado records to sync or even if you just want to further customize the help text provided by the form.</para><para>Note: For your own module, replace hook in the function name with the machine-name of your chado node type (ie: chado_feature). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" line="1238" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" bodystart="1238" bodyend="1244"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1ga6cd8d30962617a8cf05c2fa037031ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_chado_node_sync_form_submit</definition>
        <argsstring>($form, $form_state)</argsstring>
        <name>hook_chado_node_sync_form_submit</name>
        <param>
          <declname>$form</declname>
        </param>
        <param>
          <declname>$form_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bypass chado node api sync form submit.</para><para>Allows you to use this function as your own submit.</para><para>This might be necessary if you want to add additional arguments to the tripal job or to call your own sync&apos;ing function if the generic <ref refid="d8/d43/group__tripal__legacy__chado__node__api_1ga7145af80db3d89b022703df056227023" kindref="member">chado_node_sync_records()</ref> is not sufficient.</para><para>Note: For your own module, replace hook in the function name with the machine-name of your chado node type (ie: chado_feature). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" line="1260" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" bodystart="1260" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="d8/d43/group__tripal__legacy__chado__node__api_1gad8268cb0dec1581bd1c48102e62d4e9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hook_chado_node_sync_select_query</definition>
        <argsstring>($query)</argsstring>
        <name>hook_chado_node_sync_select_query</name>
        <param>
          <declname>$query</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Alter the query that retrieves records to be sync&apos;d (optional)</para><para>This might be necessary if you need fields from other chado tables to create your node or if your chado node type only supports a subset of a given table (ie: a germplasm node type might only support node creation for cerain types of stock records in which case you would need to filter the results to only those types).</para><para>Note: For your own module, replace hook in the function name with the machine-name of your chado node type (ie: chado_feature).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$query</parametername>
</parameternamelist>
<parameterdescription>
<para>An array containing the following: &apos;select&apos;: An array of select clauses &apos;joins: An array of joins (ie: a single join could be &apos;LEFT JOIN {chadotable} alias ON base.id=alias.id&apos;) &apos;where_clauses: An array of where clauses which will all be AND&apos;ed together. Use :placeholders for values. &apos;where_args: An associative array of arguments to be subbed in to the where clause where the </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" line="1316" column="1" bodyfile="legacy/tripal_core/api/tripal_core.chado_nodes.api.inc" bodystart="1316" bodyend="1343"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Many Tripal modules implement Drupal node types as a means of displaying chado records individually through Drupal as a single web page. In order to do this, many of the same drupal hooks are implemented and the code between modules is actually quite similar. This API aims to abstract much of the common functionality in order to make it easier for new Tripal modules to implement drupal node types and to centralize the maintenance effort as much as possible.</para><para>A generic sync form has been created. See <ref refid="d8/d43/group__tripal__legacy__chado__node__api_1ga753ddb12263511e4667c6081cb4aab2f" kindref="member">chado_node_sync_form()</ref> for instructions on how to implement this form in your module.</para><para>Many of the base chado tables also have associated prop, _dbxref and _relationship tables. Generic mini-forms have been created to help you handle these forms. To implement this functionality you call the mini-form from your module node form and then call the associated update functions from both your hook_insert and hook_update. The functions of interest are as follows:<itemizedlist>
<listitem><para><ref refid="d8/d43/group__tripal__legacy__chado__node__api_1ga166d6725d26f7be0d222684e055586e0" kindref="member">chado_add_node_form_properties()</ref> and <ref refid="d8/d43/group__tripal__legacy__chado__node__api_1ga3437329db2bcf725de92a9e0ded6e651" kindref="member">chado_update_node_form_properties()</ref> to provide an interface for adding/removing properties</para></listitem><listitem><para><ref refid="d8/d43/group__tripal__legacy__chado__node__api_1ga8b780287deaa0ac4cf92d6271e0b38f9" kindref="member">chado_add_node_form_dbxrefs()</ref> and <ref refid="d8/d43/group__tripal__legacy__chado__node__api_1ga3d087bdaa81217998bd843e943db32a9" kindref="member">chado_update_node_form_dbxrefs()</ref> to provide an interface for adding/removing additional database references</para></listitem><listitem><para><ref refid="d8/d43/group__tripal__legacy__chado__node__api_1ga6646656f80b03567ae5ab8ebc3c11443" kindref="member">chado_add_node_form_relationships()</ref> and <ref refid="d8/d43/group__tripal__legacy__chado__node__api_1gadf49a9526719dfe4b75346b349592f92" kindref="member">chado_update_node_form_relationships()</ref> to provide an interface for adding/removing relationships between chado records from your base table </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="d0/d77/group__tripal__chado__prop__api" kind="group">
    <compoundname>tripal_chado_prop_api</compoundname>
    <title>Chado Properties</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/d77/group__tripal__chado__prop__api_1ga6307644a082f6d6c8a8b1269c2cb5e44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_delete_property</definition>
        <argsstring>($record, $property)</argsstring>
        <name>chado_delete_property</name>
        <param>
          <declname>$record</declname>
        </param>
        <param>
          <declname>$property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a property for a given base table record using the property name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$record</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array used to identify the record to which the property should be deleted. The following keys must be used: -table: The base table for which the property should be deleted. Thus to update a property for a feature the base_table=feature. -id: The primary key value of the base table. The property will be deleted from the record that matches this id. -prop_id: The primary key in the [table]prop table to be deleted. If this value is supplied then the &apos;table&apos; and &apos;id&apos; keys are not needed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$property</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array used to specify the property to be updated. It can contain the following keys. The keys must be specified to uniquely identify the term to be applied. If the options identify more than one CV term then an error will occur. -type_name: The cvterm name to be selected. -type_id: The cvterm_id of the term to be selected. -cv_id: The cv_id of the CV that contains the term. -cv_name: The name of the CV that contains the term. -value: The specific value for the property. -rank: The specific rank for the property.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return TRUE on successful deletion and FALSE otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tripal_chado/api/tripal_chado.property.api.inc" line="458" column="1" bodyfile="tripal_chado/api/tripal_chado.property.api.inc" bodystart="458" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="d0/d77/group__tripal__chado__prop__api_1gacde5c2d1e12563cfd3614fb51525ae26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_get_property</definition>
        <argsstring>($record, $property)</argsstring>
        <name>chado_get_property</name>
        <param>
          <declname>$record</declname>
        </param>
        <param>
          <declname>$property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a property for a given base table record.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$record</parametername>
</parameternamelist>
<parameterdescription>
<para>An array used to identify the record to which the property is associated. The following keys must be used: -table: The base table for which the property should be updated. Thus to update a property for a feature the base_table=feature. -id: The primary key value of the base table. The property will be associated with the record that matches this id. -prop_id: The primary key in the [table]prop table. If this value is supplied then the &apos;table&apos; and &apos;id&apos; keys are not needed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$property</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array used to specify the property to be selected. It can contain the following keys. The keys must be specified to uniquely identify the term to be applied. If the options identify more than one CV term then an error will occur. -type_name: The cvterm name to be selected. -type_id: The cvterm_id of the term to be selected. -cv_id: The cv_id of the CV that contains the term. -cv_name: The name of the CV that contains the term. -value: The specific value for the property. -rank: The specific rank for the property. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array in the same format as that generated by the function <ref refid="dd/d88/group__tripal__chado__variables__api_1ga6d6af1f6e23e5bbfae0d7867ce09af5a" kindref="member">chado_generate_var()</ref>. If only one record is returned it is a single object. If more than one record is returned then it is an array of objects </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tripal_chado/api/tripal_chado.property.api.inc" line="47" column="1" bodyfile="tripal_chado/api/tripal_chado.property.api.inc" bodystart="47" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="d0/d77/group__tripal__chado__prop__api_1ga03550ae7e873bb2dc52ebf3818676b9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_get_record_with_property</definition>
        <argsstring>($record, $property, $options=array())</argsstring>
        <name>chado_get_record_with_property</name>
        <param>
          <declname>$record</declname>
        </param>
        <param>
          <declname>$property</declname>
        </param>
        <param>
          <declname>$options</declname>
          <defval>array()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get all records in the base table assigned one or more properties.</para><para>The property or properties of interest are specified using the $property argument.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$record</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array used to identify the table and subset of records to to be searched: -table: The base table for which the property should be updated. Thus to update a property for a feature the base_table=feature. -base_records: An array in the format accepted by the chado_select_record for specifying a subset of records in the base table. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$property</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array used to specify the property to be selected for. It can contain the following keys. The keys must be specified to uniquely identify the term to be searched. If the options identify more than one CV term then an error will occur. -type_name: The cvterm name to be selected. -type_id: The cvterm_id of the term to be selected. -cv_id: The cv_id of the CV that contains the term. -cv_name: The name of the CV that contains the term. -value: The specific value for the property. -rank: The specific rank for the property. -cvalue_id: The cvterm_id of the value for the property. <bold>note</bold> cvalue_id is an anticipated column in the the next Chado release (1.4). It is included here for early adopters.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$options</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of options supported by <ref refid="dd/d88/group__tripal__chado__variables__api_1ga6d6af1f6e23e5bbfae0d7867ce09af5a" kindref="member">chado_generate_var()</ref>. These keys are used for generating the cvterm objects returned by this function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of chado variables with the given property. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tripal_chado/api/tripal_chado.property.api.inc" line="565" column="1" bodyfile="tripal_chado/api/tripal_chado.property.api.inc" bodystart="565" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="d0/d77/group__tripal__chado__prop__api_1ga158222aa3eabd057e31104edf1161424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_get_table_property_types</definition>
        <argsstring>($prop_table)</argsstring>
        <name>chado_get_table_property_types</name>
        <param>
          <declname>$prop_table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves all of the property types currently availalbe in a prop table.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$prop_table</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the property table. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Exception</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of cvterm objects as created by <ref refid="dd/d88/group__tripal__chado__variables__api_1ga6d6af1f6e23e5bbfae0d7867ce09af5a" kindref="member">chado_generate_var()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tripal_chado/api/tripal_chado.property.api.inc" line="656" column="1" bodyfile="tripal_chado/api/tripal_chado.property.api.inc" bodystart="656" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="d0/d77/group__tripal__chado__prop__api_1gad94d6e8d68c949d1ee56b6edfca6ae70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_insert_property</definition>
        <argsstring>($record, $property, $options=array())</argsstring>
        <name>chado_insert_property</name>
        <param>
          <declname>$record</declname>
        </param>
        <param>
          <declname>$property</declname>
        </param>
        <param>
          <declname>$options</declname>
          <defval>array()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a property for a given base table.</para><para>By default if the property already exists a new property is added with the next available rank. If the option &apos;update_if_present&apos; is specified then the record will be updated if it exists rather than adding a new property.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$record</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array used to identify the record to which the property should be assigned. The following keys must be used: -table: The base table for which the property should be inserted. Thus to insert a property for a feature the base_table=feature and property is inserted into featureprop. -id: The primary key value of the base table. The property will be associated with the record that matches this id. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$property</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array used to specify the property to be added. It can contain the following keys. The keys must be specified to uniquely identify the term to be applied. If the options identify more than one CV term then an error will occur. -type_name: The cvterm name to be selected. -type_id: The cvterm_id of the term to be selected. -cv_id: The cv_id of the CV that contains the term. -cv_name: The name of the CV that contains the term. -value: The specific value for the property. -rank: The specific rank for the property. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$options</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array containing the following keys: -update_if_present: A boolean indicating whether an existing record should be updated. If the property already exists and this value is not specified or is zero then a new property will be added with the next largest rank. -force_rank: If the specified rank is already used by another property recrod for the same base_id, then set force_rank to TRUE to require that only the specified rank can be used. Otherwise, the next available rank will be used. If &apos;update_if_present&apos; is FALSE and &apos;force_rank&apos; is set then an error will occur.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return TRUE if successful and FALSE otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tripal_chado/api/tripal_chado.property.api.inc" line="161" column="1" bodyfile="tripal_chado/api/tripal_chado.property.api.inc" bodystart="161" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="d0/d77/group__tripal__chado__prop__api_1gada0bbda4e093bbb98b0cba1725859985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>chado_update_property</definition>
        <argsstring>($record, $property, $options=array())</argsstring>
        <name>chado_update_property</name>
        <param>
          <declname>$record</declname>
        </param>
        <param>
          <declname>$property</declname>
        </param>
        <param>
          <declname>$options</declname>
          <defval>array()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update a property for a given base table record and property name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>$record</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array used to identify the record to which the property should be updated. The following keys must be used: -table: The base table for which the property should be updated. Thus to update a property for a feature the base_table=feature. -id: The primary key value of the base table. The property will be associated with the record that matches this id. -prop_id: The primary key in the [table]prop table. If this value is supplied then the &apos;table&apos; and &apos;id&apos; keys are not needed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$property</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array used to specify the property to be updated. It can contain the following keys. The keys must be specified to uniquely identify the term to be applied. If the options identify more than one CV term then an error will occur. -type_name: The cvterm name to be selected. -type_id: The cvterm_id of the term to be selected. -cv_id: The cv_id of the CV that contains the term. -cv_name: The name of the CV that contains the term. -value: The specific value for the property. -rank: The specific rank for the property. -cvalue_id: The cvterm_id of the value for the property. <bold>note</bold> cvalue_id is an anticipated column in the the next Chado release (1.4). It is included here for early adopters.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>$options</parametername>
</parameternamelist>
<parameterdescription>
<para>An associative array containing the following keys: -insert_if_missing: A boolean indicating whether a record should be inserted if one doesn&apos;t exist to update.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return TRUE on Update/Insert and FALSE otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tripal_chado/api/tripal_chado.property.api.inc" line="320" column="1" bodyfile="tripal_chado/api/tripal_chado.property.api.inc" bodystart="320" bodyend="427"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The Chado Properties API provides a set of functions for interacting with the any chado prop table. </para>    </detaileddescription>
  </compounddef>
</doxygen>
